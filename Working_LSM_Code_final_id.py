import pandas as pd
df = pd.read_csv(r'to_export.merged.crm_english.stage_3_f_cleaned_final.csv') # pass the file that contains cleaned post text column
df.rename(columns={'social_handle': 'final_social_handle'}, inplace=True)
df.rename(columns={'social_handle_id': 'final_social_handle_id'}, inplace=True)
df.rename(columns={'brand_name_id': 'final_brand_name_id'}, inplace=True)

# following three lines are used to convert the post date column in same date format
df['post_date'] = pd.to_datetime(df['post_date'])
df['post_date'] = df['post_date'].dt.strftime('%m/%d/%Y')
df['year'] = df['post_date'].str[-4:]

#print(df['year'].unique())

# ----------------------------------------------------------------------------------------------------
# Reading the csv files generated by LIWC software
df_text_corpus = pd.read_csv('test_social_1_LIWCAnalysis.csv')  ## LIWC output file for social
df_text_corpus2 = pd.read_csv('test_brand_1_LIWCAnalysis.csv')  ## LIWC output file for brand

# Adding influencer suffix to the csv file that contains influencers related data
df_text_corpus = df_text_corpus.add_suffix('_influencer')
df_text_corpus.rename(columns={'year_influencer': 'year', 'final_social_handle_id_influencer': 'final_social_handle_id'}, inplace=True)

# Adding brand suffix to the csv file that contains brands related data
df_text_corpus2 = df_text_corpus2.add_suffix('_brand')
df_text_corpus2.rename(columns={'year_brand': 'year', 'final_brand_name_id_brand': 'final_brand_name_id'}, inplace=True)

# Following line of code is creating a unique list of all brands and influencers co-occurences
brand_social = df[['year','final_brand_name_id', 'final_social_handle_id']]
brand_social = brand_social.drop_duplicates()

# Converting the data type of year to int type
brand_social['year'] = brand_social['year'].astype(int)

# Merging the brand_social dataframe with df_text_corpus(influencers liwc data) and creating a new dataframe as 'a'
a=pd.merge(brand_social,df_text_corpus[['year','final_social_handle_id', 'WC_influencer','ppron_influencer','ipron_influencer', 'article_influencer','prep_influencer','auxverb_influencer','adverb_influencer','conj_influencer','negate_influencer','quantity_influencer']],on=['year','final_social_handle_id'],how='left')

#print (a.head(10))

# Merging the dataframe 'a' with df_text_corpus2(brands liwc data)
b=pd.merge(a,df_text_corpus2[['year','final_brand_name_id', 'WC_brand','ppron_brand','ipron_brand','article_brand', 'prep_brand' ,'auxverb_brand' ,'adverb_brand','conj_brand' ,'negate_brand', 'quantity_brand']],on=['year','final_brand_name_id'],how='left')

#print (b.head(10)) 

# Calculating LSM values
b['Lsm_ppron'] = 1- ((abs(b['ppron_influencer']-b['ppron_brand']))/ (b['ppron_influencer']+b['ppron_brand']+0.0001))
b['Lsm_ipron'] =1- ((abs(b['ipron_influencer']-b['ipron_brand']))/ (b['ipron_influencer']+b['ipron_brand']+0.0001)) 
b['Lsm_article'] =1- ((abs(b['article_influencer']-b['article_brand']))/ (b['article_influencer']+b['article_brand']+0.0001))
b['Lsm_prep'] =1- ((abs(b['prep_influencer']-b['prep_brand']))/ (b['prep_influencer']+b['prep_brand']+0.0001))
b['Lsm_auxverb'] =1- ((abs(b['auxverb_influencer']-b['auxverb_brand']))/ (b['auxverb_influencer']+b['auxverb_brand']+0.0001))
b['Lsm_adverb'] =1- ((abs(b['adverb_influencer']-b['adverb_brand']))/ (b['adverb_influencer']+b['adverb_brand']+0.0001))
b['Lsm_conj'] =1- ((abs(b['conj_influencer']-b['conj_brand']))/ (b['conj_influencer']+b['conj_brand']+0.0001))
b['Lsm_negate'] =1- ((abs(b['negate_influencer']-b['negate_brand']))/ (b['negate_influencer']+b['negate_brand']+0.0001))
b['Lsm_quant'] =1- ((abs(b['quantity_influencer']-b['quantity_brand']))/ (b['quantity_influencer']+b['quantity_brand']+0.0001))

# generating the LSM score for each post text
b['LSM'] = (b['Lsm_ppron'] +b['Lsm_ipron']+b['Lsm_article']+b['Lsm_prep']+b['Lsm_auxverb']+b['Lsm_adverb']+b['Lsm_conj']+b['Lsm_negate']+b['Lsm_quant']  )/9

# dropping the unwanted columns
b= b.drop(list(b)[3:32], axis=1)

# The year column doesn't align with the columns of the dataframe 'b', to add the year column to dataframe 'b'
# We are changing the datatype of the 'year' column to numeric
df['year'] = pd.to_numeric(df['year'])

# Calculating the difference in brand and influencer LSM score for every year in dataframe 'b'
# Every post in 'df' dataframe has influencer and brand information, so LSM score difference from 1 year before is calculated 
df['year'] = df['year']-1

# Merging the 'year' column to the dataframe 'b' 
df=pd.merge(df,b,on=['year','final_brand_name_id','final_social_handle_id'],how='left')

# After merging dataframe 'b' and 'df', 1 is added to the year dataframe
df['year'] = df['year']+1

print("Printing row frequency: ")
df_2 = df.notnull().sum()
print(df_2)

df.sample(100)

df.to_csv('to_export.merged.crm_english.stage_5_f__3fcleaned_id.csv') # final output file
